{"version":3,"sources":["webpack:///./src/pages/grocery-list.js"],"names":["GroceryItem","listItem","onChange","handleDelete","quantity","unit","item","id","onFieldChanged","param","value","className","key","type","size","options","UNITS_DROPDOWN","selected","isSearchable","placeholder","onClick","GroceryListPage","groceries","useSelector","state","grocery","useState","listWithId","setGrocery","dispatch","useDispatch","modalStep","setModalStep","email","setEmail","showError","setShowError","hasChanges","setHasChanges","showCloseWarning","setShowClosedWarning","map","index","idx","clone","splice","newItem","update","UNITS","NA","moreGroceries","push","updateItem","title","onClose","isOpen","label","includes","warning"],"mappings":"soBAWA,IAAMA,EAAc,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aACjCC,EAA6BH,EAA7BG,SAAUC,EAAmBJ,EAAnBI,KAAMC,EAAaL,EAAbK,KAAMC,EAAON,EAAPM,GACxBC,EAAiB,SAACC,EAAOC,GAAW,IAAD,EACvCR,EAAS,OAAD,UAAMD,IAAN,MAAiBQ,GAAQC,EAAzB,MAGV,OACE,yBAAKC,UAAU,yBAAyBC,IAAKL,GAC3C,kBAAC,IAAD,CAAOM,KAAK,SAASC,KAAK,QAAQH,UAAU,0BAC1CD,MAAON,EAAUF,SAAU,SAACQ,GAAD,OAAWF,EAAe,WAAYE,MACnE,kBAAC,IAAD,CAAUC,UAAU,sBAAsBI,QAASC,IAAgBC,SAAUZ,EAC3EH,SAAU,SAACQ,GAAD,OAAWF,EAAe,OAAQE,IAAQQ,cAAc,EAAMC,YAAY,SACtF,kBAAC,IAAD,CAAOL,KAAK,QAAQH,UAAU,iBAAiBD,MAAOJ,EACpDJ,SAAU,SAACQ,GAAD,OAAWF,EAAe,OAAQE,MAC9C,kBAAC,IAAD,CAAQU,QAASjB,MAyHRkB,UApHS,WACtB,IAAMC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,WADjB,EAEEC,mBAASC,YAAWL,IAA3CG,EAFqB,KAEZG,EAFY,KAGtBC,EAAWC,cAHW,EAIMJ,mBAAS,GAApCK,EAJqB,KAIVC,EAJU,OAKFN,mBAAS,IAA5BO,EALqB,KAKdC,EALc,OAMMR,oBAAS,GAApCS,EANqB,KAMVC,EANU,OAOQV,oBAAS,GAAtCW,EAPqB,KAOTC,EAPS,OAQqBZ,oBAAS,GAAnDa,EARqB,KAQHC,EARG,KA8D5B,OACE,kBAAC,IAAD,KACE,yBAAK7B,UAAU,+BACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,8BAAf,gBACCc,EAAQgB,KAAI,SAACnC,EAAMoC,GAAP,OACX,kBAAC1C,EAAD,CAAaY,IAAKN,EAAKC,GAAIN,SAAUK,EAAMH,aAAc,kBAvCnDwC,EAuCgED,EAtCxEE,EAAQnB,EAAQoB,OAAO,GAC7BjB,EAAWgB,GACXA,EAAMC,OAAOF,EAAK,QAClBL,GAAc,GAJD,IAACK,EACRC,GAuCI1C,SAAU,SAAC4C,GAAD,OA/CP,SAACH,EAAKrC,GACnB,IAAIsC,EAAQnB,EAAQoB,OAAO,GAC3BD,EAAMD,GAAOrC,EACbsB,EAAWgB,GACXN,GAAc,GA2CmBS,CAAOL,EAAOI,SAEzC,yBAAKnC,UAAU,sCACb,kBAAC,IAAD,CAAQA,UAAU,yBAAyBE,KAAK,YAAYO,QAAS,kBAzDlEd,EAyD4E,CAAEF,SAAU,EAAGC,KAAM2C,IAAMC,GAAI3C,KAAM,SAxDtH4C,EAAa,EAAOzB,IACZ0B,KAAK7C,GACnBsB,EAAWsB,QACXZ,GAAc,GAJJ,IAAChC,EACL4C,IAwDE,cAGEb,GACF,kBAAC,IAAD,CAAQ1B,UAAU,0BAA0BS,QAlEzC,WACXS,EAASuB,YAAW3B,IACpBa,GAAc,KAgEN,UAIJ,kBAAC,IAAD,CAAQ3B,UAAU,kBAAkBS,QA/BjB,WACnBiB,EACFG,GAAqB,GAErBR,EAAa,KA2BX,sBAGF,kBAAC,IAAD,CACEqB,MAAM,yBACNC,QAAS,kBAAMtB,EAAa,IAC5BlB,KAAK,QACLyC,OAAQxB,EAAY,GACL,IAAdA,EACC,6BACE,kBAAC,IAAD,CAAOjB,KAAK,QAAQH,UAAU,uBAAuB6C,MAAM,QAAQtD,SAtDnD,SAACQ,GACzBwB,EAASxB,GACT0B,GAAa,MAqDJD,GAAa,uBAAGxB,UAAU,oBAAb,8BACd,kBAAC,IAAD,CAAQA,UAAU,yBAAyBS,QAnD7B,WAClBa,EAAMwB,SAAS,KACjBzB,EAAa,GAEbI,GAAa,KA+CP,SAGA,uBAAGzB,UAAU,mBAAb,8DAIN,kBAAC,IAAD,CACIG,KAAK,QACL4C,SAAS,EACTH,OAAQhB,EACRe,QAAS,kBAAMd,GAAqB,IACpCa,MAAM,iBALV,4FAOI,yBAAK1C,UAAU,+BACb,kBAAC,IAAD,CAAQA,UAAU,6BAChBS,QAAS,kBAlDnBoB,GAAqB,QACrBR,EAAa,KAgDL,2BAEA,kBAAC,IAAD,CAAQnB,KAAK,YAAYO,QAAS,kBAAMoB,GAAqB,KAA7D","file":"component---src-pages-grocery-list-js-6a5061096a938c0d6b4b.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { updateItem } from \"../state/grocery\"\r\nimport { UNITS, UNITS_DROPDOWN } from '../constants'\r\nimport { listWithId } from '../constants/utils'\r\nimport Layout from \"../components/layout\"\r\nimport { Button, Input, Dropdown, Delete, Modal } from \"../components\"\r\n\r\nimport \"../styles/grocery-list.css\"\r\n\r\nconst GroceryItem = ({ listItem, onChange, handleDelete }) => {\r\n  const { quantity, unit, item, id } = listItem\r\n  const onFieldChanged = (param, value) => {\r\n    onChange({ ...listItem, [param]: value })\r\n  }\r\n\r\n  return (\r\n    <div className=\"sage-grocery-list-item\" key={id}>\r\n      <Input type=\"number\" size=\"small\" className=\"sage-item-line-quantity\"\r\n        value={quantity} onChange={(value) => onFieldChanged(\"quantity\", value)} />\r\n      <Dropdown className=\"sage-item-line-unit\" options={UNITS_DROPDOWN} selected={unit}\r\n        onChange={(value) => onFieldChanged(\"unit\", value)} isSearchable={true} placeholder=\"unit\" />\r\n      <Input size=\"small\" className=\"sage-item-line\" value={item}\r\n        onChange={(value) => onFieldChanged(\"item\", value)} />\r\n      <Delete onClick={handleDelete} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst GroceryListPage = () => {\r\n  const groceries = useSelector(state => state.grocery)\r\n  const [grocery, setGrocery] = useState(listWithId(groceries))\r\n  const dispatch = useDispatch()\r\n  const [modalStep, setModalStep] = useState(0) // 0 is closed\r\n  const [email, setEmail] = useState('')\r\n  const [showError, setShowError] = useState(false)\r\n  const [hasChanges, setHasChanges] = useState(false)\r\n  const [showCloseWarning, setShowClosedWarning] = useState(false)\r\n\r\n  const save = () => {\r\n    dispatch(updateItem(grocery))\r\n    setHasChanges(false)\r\n  }\r\n\r\n  const add = (item) => {\r\n    const moreGroceries = [...grocery]\r\n    moreGroceries.push(item)\r\n    setGrocery(moreGroceries)\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const update = (idx, item) => {\r\n    let clone = grocery.splice(0)\r\n    clone[idx] = item\r\n    setGrocery(clone)\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const remove = (idx) => {\r\n    const clone = grocery.splice(0)\r\n    setGrocery(clone)\r\n    clone.splice(idx, 1)\r\n    setHasChanges(true)\r\n  }\r\n\r\n  const handleEmailChange = (value) => {\r\n    setEmail(value)\r\n    setShowError(false)\r\n  }\r\n\r\n  const handleClickSend = () => {\r\n    if (email.includes(\"@\")) {\r\n      setModalStep(2)\r\n    } else {\r\n      setShowError(true)\r\n    }\r\n  }\r\n\r\n  const handleSendIfSave = () => {\r\n    if (hasChanges) {\r\n      setShowClosedWarning(true)\r\n    } else {\r\n      setModalStep(1)\r\n    }\r\n  }\r\n\r\n  const onCloseClicked = () => {\r\n    setShowClosedWarning(false)\r\n    setModalStep(1)\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"sage-grocery-list-container\">\r\n        <div className=\"sage-grocery-list\">\r\n          <div className=\"sage-grocery-list--heading\">Grocery list</div>\r\n          {grocery.map((item, index) =>\r\n            <GroceryItem key={item.id} listItem={item} handleDelete={() => remove(index)}\r\n              onChange={(newItem) => update(index, newItem)} />\r\n          )}\r\n          <div className=\"sage-grocery-list-button-container\">\r\n            <Button className=\"sage-grocery-list--add\" type='secondary' onClick={() => add({ quantity: 0, unit: UNITS.NA, item: \"item\" })}>\r\n              + Add item\r\n            </Button>\r\n            { hasChanges &&\r\n            <Button className=\"sage-grocery-list--save\" onClick={save}>Save</Button>\r\n            }\r\n          </div>\r\n        </div>\r\n        <Button className=\"sage-list--send\" onClick={handleSendIfSave}>Send grocery list</Button>\r\n      </div>\r\n\r\n      <Modal\r\n        title=\"Send your grocery list\"\r\n        onClose={() => setModalStep(0)}\r\n        size=\"small\"\r\n        isOpen={modalStep > 0}>\r\n        {modalStep === 1 ? (\r\n          <div>\r\n            <Input size=\"small\" className=\"sage-list-send-input\" label=\"Email\" onChange={handleEmailChange} />\r\n            {showError && <p className=\"sage-list--error\">Please enter a valid email</p>}\r\n            <Button className=\"sage-list--send-button\" onClick={handleClickSend}>Send</Button>\r\n          </div>\r\n        ) : (\r\n            <p className=\"sage-list--sent\">Your grocery list has been sent! Please check your inbox.</p>\r\n          )}\r\n      </Modal>\r\n      \r\n      <Modal\r\n          size=\"small\"\r\n          warning={true}\r\n          isOpen={showCloseWarning}\r\n          onClose={() => setShowClosedWarning(false)}\r\n          title=\"Are you sure?\">\r\n          Your recent changes have not been saved. Are you sure you want to send the outdated list?\r\n          <div className=\"sage-recipes--warning-modal\">\r\n            <Button className=\"sage-recipes--modal-button\"\r\n              onClick={() => onCloseClicked(false)}>Continue without saving</Button>\r\n            <Button type=\"secondary\" onClick={() => setShowClosedWarning(false)}>Cancel</Button>\r\n          </div>\r\n        </Modal>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default GroceryListPage\r\n"],"sourceRoot":""}